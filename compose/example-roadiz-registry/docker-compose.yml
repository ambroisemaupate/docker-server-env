version: '3'
services:
  varnish:
    image: varnish:6.3
    tmpfs: /usr/local/var/varnish:exec
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.server.scheme=http"
      - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.server.port=80"
      - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.passhostheader=true"
      # Listen HTTP
      - "traefik.http.routers.${APP_NAMESPACE}.entrypoints=http"
      - "traefik.http.routers.${APP_NAMESPACE}.rule=Host(${HOSTNAME})"
      - "traefik.http.routers.${APP_NAMESPACE}.service=${APP_NAMESPACE}"
      # Listen HTTPS
      - "traefik.http.routers.${APP_NAMESPACE}-secure.entrypoints=https"
      - "traefik.http.routers.${APP_NAMESPACE}-secure.tls=true"
      - "traefik.http.routers.${APP_NAMESPACE}-secure.tls.certresolver=letsencrypt"
      - "traefik.http.routers.${APP_NAMESPACE}-secure.rule=Host(${HOSTNAME})"
      - "traefik.http.routers.${APP_NAMESPACE}-secure.service=${APP_NAMESPACE}"
      # Apply middlewares
      - "traefik.http.routers.${APP_NAMESPACE}-secure.middlewares=${APP_NAMESPACE}Auth,${APP_NAMESPACE}Redirectregex"
      - "traefik.http.routers.${APP_NAMESPACE}.middlewares=${APP_NAMESPACE}Auth,${APP_NAMESPACE}Redirectregex,${APP_NAMESPACE}Redirectscheme"
      # Define Middlewares
      # Add a Basic auth protection
      - "traefik.http.middlewares.${APP_NAMESPACE}Auth.basicauth.users=${AUTH_BASIC}"
      # IP Whitelist
      - "traefik.http.middlewares.${APP_NAMESPACE}Ipwhitelist.ipwhitelist.sourcerange=${IP_RANGE}"
      # Add domain redirection (${APP_NAMESPACE} non-www to www redir)
      - "traefik.http.middlewares.${APP_NAMESPACE}Redirectregex.redirectregex.regex=${REDIRECT_REGEX}"
      - "traefik.http.middlewares.${APP_NAMESPACE}Redirectregex.redirectregex.replacement=${REDIRECT_REPLACEMENT}"
      - "traefik.http.middlewares.${APP_NAMESPACE}Redirectregex.redirectregex.permanent=true"
      # Add SSL redirection
      - "traefik.http.middlewares.${APP_NAMESPACE}Redirectscheme.redirectscheme.scheme=https"
      - "traefik.http.middlewares.${APP_NAMESPACE}Redirectscheme.redirectscheme.permanent=true"
    depends_on:
      - app
    restart: always
    links:
      - app:app
    networks:
      - default
      - frontproxynet
    volumes:
      - ./default.vcl:/etc/varnish/default.vcl:ro

  app:
    # Application is a packaged docker image
    # hosted on Gitlab Registry (or hub.docker.com)
    image: registry.gitlab.com/example/example
    # These volumes contain all user DATA
    # and will be backuped if your backup container
    # uses --volumes-from option.
    volumes:
      - ./config.docker.yml:/var/www/html/app/conf/config.yml
      - private_files:/var/www/html/files
      - public_files:/var/www/html/web/files
      # Save image thumbnails between restart to save CPU
      - assets_files:/var/www/html/web/assets
      - gen_src:/var/www/html/app/gen-src/GeneratedNodeSources
      - proxies:/var/www/html/app/gen-src/Proxies
      - compiled:/var/www/html/app/gen-src/Compiled
    depends_on:
      - db
      - solr
    restart: always
    networks:
      - default
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  db:
    image: mysql:5.7
    networks:
      - default
    volumes:
      - DBDATA:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_RANDOM_ROOT_PASSWORD: "yes"
    restart: always

  solr:
    image: solr:8-slim
    restart: always
    networks:
      - default
    volumes:
      - SOLRDATA:/var/solr
    command:
      - solr-precreate
      - roadiz

  backup:
    image: ambroisemaupate/ftp-backup
    networks:
      - default
    depends_on:
      - db
    environment:
      LOCAL_PATH: /var/www/html
      DB_USER: ${MYSQL_USER}
      DB_HOST: db
      DB_PASS: ${MYSQL_PASSWORD}
      DB_NAME: ${MYSQL_DATABASE}
      FTP_PROTO: ${FTP_PROTO}
      FTP_PORT: ${FTP_PORT}
      FTP_HOST: ${FTP_HOST}
      FTP_USER: ${FTP_USER}
      FTP_PASS: ${FTP_PASS}
      REMOTE_PATH: ${FTP_REMOTE_PATH}
    volumes:
      - private_files:/var/www/html/files:ro
      - public_files:/var/www/html/web/files:ro
      - gen_src:/var/www/html/app/gen-src:ro

  backup_cleanup:
    image: ambroisemaupate/ftp-cleanup
    networks:
      - default
    environment:
      FTP_PROTO: ${FTP_PROTO}
      FTP_PORT: ${FTP_PORT}
      FTP_HOST: ${FTP_HOST}
      FTP_USER: ${FTP_USER}
      FTP_PASS:  ${FTP_PASS}
      STORE_DAYS: ${BACKUP_STORE_DAYS}
      FTP_PATH: ${FTP_REMOTE_PATH}
      
#   backup:
#     image: ambroisemaupate/s3-backup
#     networks:
#       - default
#     depends_on:
#       - db
#     environment:
#       LOCAL_PATH: /var/www/html
#       DB_USER: ${MYSQL_USER}
#       DB_HOST: db
#       DB_PASS: ${MYSQL_PASSWORD}
#       DB_NAME: ${MYSQL_DATABASE}
#       S3_ACCESS_KEY: ${S3_ACCESS_KEY}
#       S3_SECRET_KEY: ${S3_SECRET_KEY}
#       S3_SIGNATURE: ${S3_SIGNATURE}
#       S3_BUCKET_LOCATION: ${S3_BUCKET_LOCATION}
#       S3_HOST_BASE: ${S3_HOST_BASE}
#       S3_HOST_BUCKET: ${S3_HOST_BUCKET}
#       S3_BUCKET_NAME: ${S3_BUCKET_NAME}
#       S3_FOLDER_NAME: ${S3_FOLDER_NAME}
#     volumes:
#       - private_files:/var/www/html/files:ro
#       - public_files:/var/www/html/web/files:ro
#       - gen_src:/var/www/html/app/gen-src:ro
  
  # Automatically update when new images are available
  watchtower:
    image: containrrr/watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # Share private registry credentials
      - /root/.docker/config.json:/config.json
    # checks every 5 min
    command: --interval 300
    environment:
      #WATCHTOWER_DEBUG: "true"
      WATCHTOWER_LABEL_ENABLE: "true"

volumes:
  private_files:
  public_files:
  assets_files:
  gen_src:
  proxies:
  compiled:
  DBDATA:
  SOLRDATA:

networks:
  frontproxynet:
    external: true
