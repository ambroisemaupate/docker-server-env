#
# THIS IS AN EXAMPLE FILE WORKING WITH TRAEFIK ONLY
# https://docs.gitlab.com/ee/install/docker/installation.html
#
# Copy .env.dist to .env to customize your domain names.
#
services:
  gitlab:
    image: 'gitlab/gitlab-ce:latest'
    container_name: gitlab
    shm_size: '256m'
    restart: always
    #
    # Alias is needed for Mattermost
    # to be able to contact Gitlab SSO
    #
    hostname: ${GITLAB_HOSTNAME}
    privileged: true
    networks:
      - default
      - frontproxynet
    # Using Traefik
    # https://docs.traefik.io/user-guide/docker-and-lets-encrypt/
    labels:
      - "traefik.enable=true"

      - "traefik.http.middlewares.gitlab-redirectscheme.redirectscheme.scheme=https"
      - "traefik.http.middlewares.gitlab-redirectscheme.redirectscheme.permanent=false"
      - "traefik.http.middlewares.gitlab-sts.headers.stsincludesubdomains=false"
      - "traefik.http.middlewares.gitlab-sts.headers.stspreload=true"
      - "traefik.http.middlewares.gitlab-sts.headers.stsseconds=31536000"
      - "traefik.http.middlewares.gitlab-sts.headers.isdevelopment=false"

      - "traefik.http.routers.gitlab.entrypoints=http,https"
      - "traefik.http.routers.gitlab.middlewares=gitlab-redirectscheme,gitlab-sts"
      - "traefik.http.routers.gitlab.rule=Host(`${GITLAB_HOSTNAME}`)"
      - "traefik.http.routers.gitlab.service=gitlab"
      - "traefik.http.routers.gitlab.tls=true"
      - "traefik.http.routers.gitlab.tls.certresolver=letsencrypt"

      - "traefik.http.services.gitlab.loadbalancer.server.port=${GITLAB_PORT}"
      - "traefik.http.services.gitlab.loadbalancer.server.scheme=http"
      - "traefik.http.services.gitlab.loadbalancer.passhostheader=true"

      - "traefik.http.routers.registry.rule=Host(`${REGISTRY_HOSTNAME}`)"
      - "traefik.http.routers.registry.entrypoints=http,https"
      - "traefik.http.routers.registry.service=registry"
      - "traefik.http.routers.registry.tls.certresolver=letsencrypt"
      - "traefik.http.routers.registry.tls=true"
      
      - "traefik.http.services.registry.loadbalancer.server.port=${REGISTRY_PORT}"

      - "traefik.http.routers.mattermost.rule=Host(`${MATTERMOST_HOSTNAME}`)"
      - "traefik.http.routers.mattermost.entrypoints=http,https"
      - "traefik.http.routers.mattermost.service=mattermost"
      - "traefik.http.routers.mattermost.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mattermost.tls=true"
      - "traefik.http.routers.mattermost.middlewares=mattermost-redirectscheme,gitlab-sts"
      
      - "traefik.http.middlewares.mattermost-redirectscheme.redirectscheme.scheme=https"
      - "traefik.http.middlewares.mattermost-redirectscheme.redirectscheme.permanent=false"

      - "traefik.http.services.mattermost.loadbalancer.server.port=${MATTERMOST_PORT}"
      - "traefik.http.services.mattermost.loadbalancer.server.scheme=http"
      - "traefik.http.services.mattermost.loadbalancer.passhostheader=true"
    # I had problems with the health check. Sometimes it reported unhealthyness and therefore Traefik removed
    # the container, so I turned it off. Maybe it works by now.
    healthcheck:
      disable: true
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://${GITLAB_HOSTNAME}'
        nginx['redirect_http_to_https'] = false
        nginx['listen_port'] = ${GITLAB_PORT}
        nginx['listen_https'] = false
        #nginx['proxy_set_headers'] = {
        #  'X-Forwarded-Proto' => 'https',
        #  'X-Forwarded-Ssl' => 'on'
        #}
        nginx['client_max_body_size'] = '2G'
        
        #
        # PlantUML
        # https://docs.gitlab.com/ee/administration/integration/plantuml.html
        #
        nginx['custom_gitlab_server_config'] = "location /-/plantuml/ { \n    rewrite ^/-/plantuml/(.*) /$1 break;\n proxy_cache off; \n    proxy_pass  http://plantuml:8080/; \n}\n"
        
        #
        # Emails
        #
        gitlab_rails['smtp_enable'] = true
        gitlab_rails['smtp_address'] = "${SMTP_ADDRESS}"
        gitlab_rails['smtp_port'] = ${SMTP_PORT}
        gitlab_rails['smtp_user_name'] = "${SMTP_USERNAME}"
        gitlab_rails['smtp_password'] = "${SMTP_PASSWORD}"
        gitlab_rails['smtp_domain'] = "${SMTP_DOMAIN}"
        gitlab_rails['smtp_authentication'] = "login"
        gitlab_rails['smtp_enable_starttls_auto'] = true
        gitlab_rails['incoming_email_enabled'] = false
        gitlab_rails['gitlab_email_enabled'] = true
        gitlab_rails['gitlab_email_from'] = 'gitlab-notifications@${SMTP_DOMAIN}'
        gitlab_rails['gitlab_email_display_name'] = 'Gitlab'
        gitlab_rails['gitlab_email_reply_to'] = 'noreply@${SMTP_DOMAIN}'
        
        # Puma config (ex. Unicorn)
        # https://docs.gitlab.com/omnibus/settings/puma.html#configuring-puma-settings
        puma['worker_processes'] = 7

        #
        # Send backups to Object Storage
        #
        gitlab_rails['backup_upload_connection'] = {
          'provider' => 'AWS',
          'region' => '${OBJECT_STORE_S3_REGION}',
          'endpoint' => 'https://${OBJECT_STORE_BUCKET_NAME}.s3.${OBJECT_STORE_S3_REGION}.scw.cloud',
          'aws_access_key_id' => '${OBJECT_STORE_ACCESS_KEY_ID}',
          'aws_secret_access_key' => '${OBJECT_STORE_SECRET_ACCESS_KEY}'
        }
        gitlab_rails['backup_upload_remote_directory'] = 'gitlab-backups'
        gitlab_rails['backup_keep_time'] = 172800
        gitlab_ci['backup_keep_time'] = 172800
        gitlab_rails['time_zone'] = "${TIMEZONE}"

        #
        # https://docs.gitlab.com/ee/administration/packages/container_registry.html#disable-container-registry-for-new-projects-site-wide
        #
        gitlab_rails['gitlab_default_projects_features_issues'] = false
        gitlab_rails['gitlab_default_projects_features_merge_requests'] = false
        gitlab_rails['gitlab_default_projects_features_wiki'] = false
        gitlab_rails['gitlab_default_projects_features_snippets'] = false
        gitlab_rails['gitlab_default_projects_features_builds'] = true
        gitlab_rails['gitlab_default_projects_features_builds'] = false

        #
        # Consolidated object storage configuration for S3 compatible such as Scaleway
        # https://docs.gitlab.com/15.0/ee/administration/object_storage.html
        #
        gitlab_rails['object_store']['enabled'] = true
        gitlab_rails['object_store']['proxy_download'] = true
        gitlab_rails['object_store']['connection'] = {
          'provider' => 'AWS',
          'region' => '${OBJECT_STORE_S3_REGION}',
          'endpoint' => 'https://${OBJECT_STORE_BUCKET_NAME}.s3.${OBJECT_STORE_S3_REGION}.scw.cloud',
          'aws_access_key_id' => '${OBJECT_STORE_ACCESS_KEY_ID}',
          'aws_secret_access_key' => '${OBJECT_STORE_SECRET_ACCESS_KEY}',
          'enable_signature_v4_streaming' => false,
          'path_style' => false
        }
        # One bucket = one type
        gitlab_rails['object_store']['objects']['artifacts']['bucket'] = 'gitlab-artifacts'
        gitlab_rails['object_store']['objects']['external_diffs']['bucket'] = 'gitlab-external-diffs'
        gitlab_rails['object_store']['objects']['lfs']['bucket'] = 'gitlab-lfs'
        gitlab_rails['object_store']['objects']['uploads']['bucket'] = 'gitlab-uploads'
        gitlab_rails['object_store']['objects']['packages']['bucket'] = 'gitlab-packages'
        gitlab_rails['object_store']['objects']['dependency_proxy']['bucket'] = 'gitlab-dependency-proxy'
        gitlab_rails['object_store']['objects']['terraform_state']['bucket'] = 'gitlab-terraform-state'
        gitlab_rails['object_store']['objects']['ci_secure_files']['bucket'] = 'gitlab-ci-secure-files'
        gitlab_rails['object_store']['objects']['pages']['bucket'] = 'gitlab-pages'

        #
        # Docker registry
        #
        registry_external_url 'https://${REGISTRY_HOSTNAME}'
        gitlab_rails['registry_enabled'] = true
        gitlab_rails['registry_issuer'] = "omnibus-gitlab-issuer"
        registry_nginx['listen_port'] = ${REGISTRY_PORT}
        registry_nginx['listen_https'] = false
        registry_nginx['redirect_http_to_https'] = false

        #
        # First run this stack before
        # configuring Mattermost
        #
        mattermost_external_url 'https://${MATTERMOST_HOSTNAME}'
        mattermost['enable'] = true
        mattermost['service_site_url'] = 'https://${MATTERMOST_HOSTNAME}'
        mattermost_nginx['listen_port'] = ${MATTERMOST_PORT}
        mattermost_nginx['listen_https'] = false
        mattermost_nginx['redirect_http_to_https'] = false
        #mattermost_nginx['proxy_set_headers'] = {
        #  "X-Forwarded-Proto" => "https",
        #  "X-Forwarded-Ssl" => "on",
        #}
        mattermost['service_use_ssl'] = false
        mattermost['gitlab_id'] = "${MATTERMOST_GITLAB_ID}"
        mattermost['gitlab_secret'] = "${MATTERMOST_GITLAB_SECRET}"
        mattermost['gitlab_scope'] = ""
        #
        # Need to contact Gitlab on HTTP
        # https://forum.mattermost.org/t/solved-mattermost-gitlab-token-request-failed/2628/6
        #
        mattermost['gitlab_auth_endpoint'] = "http://${GITLAB_HOSTNAME}/oauth/authorize"
        mattermost['gitlab_token_endpoint'] = "http://${GITLAB_HOSTNAME}/oauth/token"
        mattermost['gitlab_user_api_endpoint'] = "http://${GITLAB_HOSTNAME}/api/v4/user"

    ports:
      # Make sure your host 22 port is not already taken by SSH
      # We encourage you to change you host SSH port to reserve it for Gitlab
      - '22:22'
    volumes:
      - config:/etc/gitlab
      - logs:/var/log/gitlab
      - data:/var/opt/gitlab
      # Use this repo traefik configuration to export SSL certs into distincts files
      # You should enable following line only after you started Gitlab to let Traefik
      # generate SSL certs from Let's encrypt, then uncomment and launch Gitlab again
      #- './../traefik/certs/certs/${REGISTRY_HOSTNAME}.crt:/etc/gitlab/ssl/${REGISTRY_HOSTNAME}.crt:ro'
      #- './../traefik/certs/private/${REGISTRY_HOSTNAME}.key:/etc/gitlab/ssl/${REGISTRY_HOSTNAME}.key:ro'
      #- './../traefik/certs/certs/${GITLAB_HOSTNAME}.crt:/etc/gitlab/ssl/${GITLAB_HOSTNAME}.crt:ro'
      #- './../traefik/certs/private/${GITLAB_HOSTNAME}.key:/etc/gitlab/ssl/${GITLAB_HOSTNAME}.key:ro'
      #- './../traefik/certs/certs/${MATTERMOST_HOSTNAME}.crt:/etc/gitlab/ssl/${MATTERMOST_HOSTNAME}.crt:ro'
      #- './../traefik/certs/private/${MATTERMOST_HOSTNAME}.key:/etc/gitlab/ssl/${MATTERMOST_HOSTNAME}.key:ro'

  plantuml:
    image: 'plantuml/plantuml-server:tomcat'
    restart: always
    container_name: plantuml
    networks:
      - default

networks:
  frontproxynet:
    external: true

volumes:
  config:
  logs:
  data:
